const Stars = (props) => {

  let stars = [];
  for(let i=0; i<props.numberOfStars; i++) {
  	stars.push(<i key={i} className="fa fa-star"></i>);
  }
return (
	<div className='col-5'>
  	{stars}
  </div>
);
}

const Button = (props) => {
	let button;
  switch(props.answerIsCorrect) {
  	case true:
    	button =
      	<button className='btn btn-success'
        onClick={() => props.acceptAnswer()}>
        	<i className='fa fa-check'></i>
        </button>;
      break;
    case false:
    	button =
      	<button className='btn btn-danger'>
        	<i className='fa fa-times'></i>
        </button>;
         break;
    default:
    	button =
        <button className='btn' disabled={props.selectedNumbers.length <= 0}
        onClick={() => {props.checkAnswer()}}>=</button>;
     break;
  }
	return (
  	<div className='col-2'>
    	{button}
    </div>
  );
}

const Answer = (props) => {
	return (
  	<div className='col-5'>
    	{props.selectedNumbers.map((number, i) =>
      	<span key={i}
        onClick={() => {props.unselectNumber(number)}}
        >{number}</span>
      )}
    </div>
  );
}

const Numbers = (props) => {

	const numberClassName = (number) => {
  	if (props.selectedNumbers.indexOf(number) >= 0) {
    	return 'selected';
    };
    if (props.usedNumbers.indexOf(number) >= 0) {
    	return 'used';
    };
  }
	return (
    <div className='card text-center'>
    	<div>
      	{Numbers.list.map((number, i) =>
        	<span key={i} className={numberClassName(number)}
          	onClick={() => { props.selectNumber(number)}}
          >{number}</span>
        )}
      </div>
    </div>
  );
}

Numbers.list = _.range(1, 10);

class Game extends React.Component {
	state = {
  	selectedNumbers: [],
    numberOfStars: 1 + Math.floor(Math.random()*9),
    answerIsCorrect: null,
    usedNumbers: []
  };

  selectNumber = (clickedNumber) => {
  if (this.state.selectedNumbers.indexOf(clickedNumber) >= 0) { return; }
  	this.setState(prevState => ({
    	answerIsCorrect: null,
    	selectedNumbers: prevState.selectedNumbers.concat(clickedNumber)
    }));
  };

  unselectNumber = (clickedNumber) => {

		this.setState(prevState => ({
    	answerIsCorrect: null,
    	selectedNumbers: prevState.selectedNumbers.filter(number => number !== clickedNumber)
    }));
  };

  checkAnswer = () => {
  	this.setState(prevState => ({
    	answerIsCorrect: prevState.numberOfStars === prevState.selectedNumbers.reduce((acc, n) => acc + n, 0)
    }));
  };

  acceptAnswer = () => {
  	this.setState(prevState => ({
    	usedNumbers: prevState.usedNumbers.concat(prevState.selectedNumbers),
      selectedNumbers: [],
      numberOfStars: 1 + Math.floor(Math.random()*9),
    }));
  }

	render() {
  	const { selectedNumbers, numberOfStars, answerIsCorrect } = this.state;
  	return (
    	<div className='containter'>
      	<h3>Play Nine</h3>
        <div className='row'>
          <Stars numberOfStars = {numberOfStars}/>
          <Button selectedNumbers = {selectedNumbers} checkAnswer={this.checkAnswer} answerIsCorrect={answerIsCorrect} acceptAnswer={this.acceptAnswer}/>
          <Answer selectedNumbers = {selectedNumbers} unselectNumber = {this.unselectNumber}/>
        </div>
        <Numbers selectedNumbers = {selectedNumbers} selectNumber = {this.selectNumber}
        	usedNumbers={this.state.usedNumbers}/>
      </div>
    );
  }
}

class App extends React.Component {
	render() {
  	return (
    	<div>
      <Game />
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);
